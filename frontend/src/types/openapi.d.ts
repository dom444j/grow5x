/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check del servidor
         * @description Verifica el estado del servidor y la base de datos
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Servidor funcionando correctamente */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ok */
                            status?: string;
                            /** Format: date-time */
                            timestamp?: string;
                            /** @example production */
                            environment?: string;
                            database?: {
                                /** @example connected */
                                status?: string;
                            };
                            /** @example 1.0.0 */
                            version?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Configuración pública para el frontend
         * @description Retorna configuración pública que el frontend necesita para validaciones y UI:
         *     - Red y moneda soportadas
         *     - Límites mínimos y máximos de retiro
         *     - Objetivos SLA para retiros
         *     - Disclaimer legal sobre SLA
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Configuración pública obtenida exitosamente */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Red blockchain soportada
                             * @example BEP20
                             */
                            network?: string;
                            /**
                             * @description Moneda soportada
                             * @example USDT
                             */
                            currency?: string;
                            /**
                             * @description Mínimo de retiro en USDT BEP20
                             * @example 10
                             */
                            withdrawMinUSDTBEP20?: number;
                            /**
                             * @description Máximo de retiro en USDT BEP20
                             * @example 10000
                             */
                            withdrawMaxUSDTBEP20?: number;
                            /**
                             * @description Objetivos SLA en minutos para retiros
                             * @example [
                             *       15,
                             *       30,
                             *       60,
                             *       180,
                             *       360,
                             *       720,
                             *       1440
                             *     ]
                             */
                            withdrawSlaTargetsMinutes?: number[];
                            legal?: {
                                /**
                                 * @description Disclaimer legal sobre SLA de retiros
                                 * @example Los tiempos son un objetivo operativo (SLA). El procesamiento es manual por un administrador y no constituye garantía.
                                 */
                                withdrawSlaDisclaimer?: string;
                            };
                        };
                    };
                };
                /** @description Error interno del servidor */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Error interno del servidor */
                            error?: string;
                            /** @example CONFIG_ERROR */
                            code?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/referrals/validate/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validar código de referido
         * @description Valida un código de referido y retorna información del referidor
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Código de referido a validar */
                    code: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Código validado exitosamente */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example true */
                            valid?: boolean;
                            /** @example Código de referido válido */
                            message?: string;
                            referrer?: {
                                /** @example USR_20240101_001 */
                                userId?: string;
                                /** @example Juan */
                                firstName?: string;
                                /** @example Pérez */
                                lastName?: string;
                                /** @example REF123456 */
                                referralCode?: string;
                            };
                        };
                    };
                };
                /** @description Código de referido no encontrado */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example false */
                            success?: boolean;
                            /** @example false */
                            valid?: boolean;
                            /** @example Código de referido no encontrado */
                            message?: string;
                        };
                    };
                };
                /** @description Error interno del servidor */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example false */
                            success?: boolean;
                            /** @example false */
                            valid?: boolean;
                            /** @example Error interno del servidor */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Registro de nuevo usuario
         * @description Registra un nuevo usuario con código de referido
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @example usuario@ejemplo.com
                         */
                        email: string;
                        /** @example password123 */
                        password: string;
                        /**
                         * @description Opcional - Nombre del usuario
                         * @example Juan
                         */
                        firstName?: string;
                        /**
                         * @description Opcional - Apellido del usuario
                         * @example Pérez
                         */
                        lastName?: string;
                        /**
                         * @description Opcional - Teléfono del usuario
                         * @example +1234567890
                         */
                        phone?: string;
                        /**
                         * @description Opcional - País del usuario
                         * @example México
                         */
                        country?: string;
                        /** @example REF123456 */
                        referralCode: string;
                        /**
                         * @description Opcional - Username de Telegram para notificaciones
                         * @example @usuario
                         */
                        telegramUsername?: string;
                    };
                };
            };
            responses: {
                /** @description Usuario registrado exitosamente */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Error de validación o email ya existe */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Inicio de sesión
         * @description Autentica un usuario y devuelve JWT token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @example usuario@ejemplo.com
                         */
                        email: string;
                        /** @example password123 */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Login exitoso */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Credenciales inválidas */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener información del usuario actual (endpoint canónico)
         * @description Devuelve la información del usuario autenticado
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Información del usuario */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: components["schemas"]["User"];
                        };
                    };
                };
                /** @description Token inválido */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener información del usuario actual (alias legacy)
         * @description Devuelve la información del usuario autenticado
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Información del usuario */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: components["schemas"]["User"];
                        };
                    };
                };
                /** @description Token inválido */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cerrar sesión
         * @description Invalida el token JWT actual
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logout exitoso */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example Sesión cerrada exitosamente */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener lista de paquetes
         * @description Devuelve todos los paquetes disponibles
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filtrar por paquetes activos */
                    active?: "true" | "false";
                    /** @description Filtrar por paquetes visibles */
                    visible?: "true" | "false";
                    /** @description Ordenar resultados */
                    sort?: "sortOrder" | "price_asc" | "price_desc" | "name";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de paquetes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                packages?: components["schemas"]["Package"][];
                                /** @example 3 */
                                count?: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages/{packageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener detalles de un paquete
         * @description Devuelve información detallada de un paquete específico
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID del paquete */
                    packageId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detalles del paquete */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: components["schemas"]["Package"];
                        };
                    };
                };
                /** @description Paquete no encontrado */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages/{packageId}/commission-calculator": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Calculadora de comisiones
         * @description Calcula las comisiones potenciales para un paquete
         */
        get: {
            parameters: {
                query?: {
                    /** @description Cantidad de paquetes */
                    quantity?: number;
                };
                header?: never;
                path: {
                    /** @description ID del paquete */
                    packageId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cálculo de comisiones */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                package?: components["schemas"]["Package"];
                                calculation?: {
                                    /** @example 2 */
                                    quantity?: number;
                                    /** @example 2000 */
                                    totalInvestment?: number;
                                    commissionBreakdown?: {
                                    /** @example 0.1 */
                                    rate?: number;
                                    /** @example 200 */
                                        amount?: number;
                                    }[];
                                };
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enviar solicitud de pago
         * @description Crea una nueva solicitud de pago y asigna wallet
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example PKG_BASIC_001 */
                        packageId: string;
                        /** @example 2 */
                        quantity: number;
                    };
                };
            };
            responses: {
                /** @description Solicitud de pago creada */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: components["schemas"]["Purchase"];
                        };
                    };
                };
                /** @description Error de validación */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/confirm-hash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirmar hash de transacción
         * @description Envía el hash de transacción para confirmación
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example PUR_20240101_001 */
                        purchaseId: string;
                        /** @example 0x1234567890abcdef */
                        transactionHash: string;
                    };
                };
            };
            responses: {
                /** @description Hash confirmado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example Hash de transacción enviado exitosamente */
                            message?: string;
                            data?: {
                                /** @example PUR_20240101_001 */
                                purchaseId?: string;
                                /** @example hash_submitted */
                                status?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me/purchases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener mis compras (endpoint canónico)
         * @description Lista las compras del usuario autenticado
         */
        get: {
            parameters: {
                query?: {
                    /** @description Número de página */
                    page?: number;
                    /** @description Elementos por página */
                    limit?: number;
                    /** @description Filtrar por estado */
                    status?: "pending" | "hash_submitted" | "confirmed" | "rejected";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de compras */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                purchases?: components["schemas"]["Purchase"][];
                                pagination?: components["schemas"]["Pagination"];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/my-purchases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener mis compras (alias legacy)
         * @description Lista las compras del usuario autenticado
         */
        get: {
            parameters: {
                query?: {
                    /** @description Número de página */
                    page?: number;
                    /** @description Elementos por página */
                    limit?: number;
                    /** @description Filtrar por estado */
                    status?: "pending" | "hash_submitted" | "confirmed" | "rejected";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de compras */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                purchases?: components["schemas"]["Purchase"][];
                                pagination?: components["schemas"]["Pagination"];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener perfil completo
         * @description Devuelve información detallada del perfil del usuario
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Perfil del usuario */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: components["schemas"]["UserProfile"];
                        };
                    };
                };
            };
        };
        /**
         * Actualizar perfil
         * @description Actualiza la información del perfil del usuario
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example Juan */
                        firstName?: string;
                        /** @example Pérez */
                        lastName?: string;
                        /** @example +1234567890 */
                        phone?: string;
                        /** @example México */
                        country?: string;
                        /** @example @usuario */
                        telegramUsername?: string;
                    };
                };
            };
            responses: {
                /** @description Perfil actualizado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example Perfil actualizado exitosamente */
                            message?: string;
                            data?: components["schemas"]["User"];
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener historial de transacciones
         * @description Lista las transacciones del usuario
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    /** @description Tipo de transacción */
                    type?: "purchase" | "commission" | "withdrawal" | "daily_benefit";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Historial de transacciones */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                transactions?: components["schemas"]["Transaction"][];
                                pagination?: components["schemas"]["Pagination"];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me/otp/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Solicitar código OTP
         * @description Genera y envía un código OTP por Telegram
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @default withdrawal
                         * @enum {string}
                         */
                        purpose?: "withdrawal";
                    };
                };
            };
            responses: {
                /** @description OTP enviado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example Código OTP enviado por Telegram */
                            message?: string;
                            data?: {
                                /** @example otp_123456 */
                                otpId?: string;
                                /** Format: date-time */
                                expiresAt?: string;
                                /** @example 3 */
                                remainingAttempts?: number;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me/otp/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estado del OTP
         * @description Verifica el estado actual del OTP
         */
        get: {
            parameters: {
                query?: {
                    purpose?: "withdrawal";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Estado del OTP */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                /** @example true */
                                hasActiveOtp?: boolean;
                                /** Format: date-time */
                                expiresAt?: string;
                                /** @example 2 */
                                remainingAttempts?: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me/withdrawals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener mis retiros
         * @description Lista los retiros del usuario
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    status?: "pending" | "approved" | "completed" | "rejected";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de retiros */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                withdrawals?: components["schemas"]["Withdrawal"][];
                                pagination?: components["schemas"]["Pagination"];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Solicitar retiro
         * @description Crea una nueva solicitud de retiro
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example 100 */
                        amount: number;
                        /**
                         * @example USDT
                         * @enum {string}
                         */
                        currency: "USDT";
                        /** @example TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE */
                        destinationAddress: string;
                        /**
                         * @example BEP20
                         * @enum {string}
                         */
                        network: "BEP20";
                        /**
                         * @description Código OTP de 6 dígitos enviado por Telegram
                         * @example 123456
                         */
                        otp?: string;
                    };
                };
            };
            responses: {
                /** @description Solicitud de retiro creada */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example Solicitud de retiro creada exitosamente */
                            message?: string;
                            data?: components["schemas"]["Withdrawal"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me/commissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener mis comisiones
         * @description Lista las comisiones del usuario
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    status?: "pending" | "unlocked" | "paid";
                    type?: "direct_referral" | "parent_bonus";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de comisiones */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                commissions?: components["schemas"]["Commission"][];
                                pagination?: components["schemas"]["Pagination"];
                                summary?: {
                                    /** @example 1500 */
                                    totalEarned?: number;
                                    /** @example 300 */
                                    totalPending?: number;
                                    /** @example 1200 */
                                    totalUnlocked?: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/payments/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener pagos pendientes
         * @description Lista todos los pagos pendientes de confirmación
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    /** @description Buscar por ID de compra o hash de transacción */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de pagos pendientes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                purchases?: components["schemas"]["PendingPurchase"][];
                                pagination?: components["schemas"]["Pagination"];
                            };
                        };
                    };
                };
                /** @description Acceso denegado - requiere rol admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/payments/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirmar o rechazar pago
         * @description Confirma o rechaza un pago pendiente
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example PUR_20240101_001 */
                        purchaseId: string;
                        /**
                         * @example confirm
                         * @enum {string}
                         */
                        action: "confirm" | "reject";
                        /** @example Pago verificado en blockchain */
                        notes?: string;
                    };
                };
            };
            responses: {
                /** @description Acción completada */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example Pago confirmado exitosamente */
                            message?: string;
                            data?: {
                                /** @example PUR_20240101_001 */
                                purchaseId?: string;
                                /** @example confirmed */
                                status?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/dashboard/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estadísticas del dashboard
         * @description Obtiene estadísticas generales para el dashboard admin
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Estadísticas del dashboard */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                stats?: {
                                    purchases?: {
                                        /** @example 150 */
                                        total?: number;
                                        byStatus?: {
                                            [key: string]: {
                                                count?: number;
                                                totalAmount?: number;
                                            };
                                        };
                                        /** @example 75000 */
                                        totalRevenue?: number;
                                    };
                                    users?: {
                                        /** @example 500 */
                                        totalUsers?: number;
                                        /** @example 450 */
                                        activeUsers?: number;
                                        /** @example 400 */
                                        verifiedUsers?: number;
                                    };
                                    commissions?: {
                                        /** @example 300 */
                                        total?: number;
                                        /** @example 15000 */
                                        totalAmount?: number;
                                    };
                                    wallets?: {
                                        /** @example 10 */
                                        total?: number;
                                        byStatus?: {
                                            [key: string]: number;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estado de salud del sistema con semáforo
         * @description Obtiene el estado de salud del sistema con lógica de semáforo:
         *     - **healthy**: Todo funcionando correctamente
         *     - **degraded**: Errores detectados o ejecuciones tardías (>2h)
         *     - **down**: Sin ejecuciones en 24h o flags desactivados
         *
         *     Incluye cache de 10 segundos para evitar sobrecarga.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sistema saludable o degradado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @example healthy
                             * @enum {string}
                             */
                            status?: "healthy" | "degraded" | "down";
                            /**
                             * Format: date-time
                             * @example 2025-01-16T15:30:00.000Z
                             */
                            timestamp?: string;
                            benefits?: {
                                /**
                                 * Format: date-time
                                 * @example 2025-01-16T03:00:00.000Z
                                 */
                                lastRun?: string | null;
                                /** @example 123 */
                                processed?: number;
                                /** @example 0 */
                                errors?: number;
                                /** @example 15375.5 */
                                totalAmount?: number;
                                /**
                                 * @example success
                                 * @enum {string}
                                 */
                                status?: "success" | "error" | "running" | "unknown";
                                /** @example null */
                                errorMessage?: string | null;
                                /**
                                 * @example healthy
                                 * @enum {string}
                                 */
                                healthStatus?: "healthy" | "degraded" | "down";
                            };
                            commissionsUnlock?: {
                                /**
                                 * Format: date-time
                                 * @example 2025-01-16T03:30:00.000Z
                                 */
                                lastRun?: string | null;
                                /** @example 45 */
                                processed?: number;
                                /** @example 0 */
                                errors?: number;
                                /** @example 4500 */
                                totalAmount?: number;
                                /**
                                 * @example success
                                 * @enum {string}
                                 */
                                status?: "success" | "error" | "running" | "unknown";
                                /** @example null */
                                errorMessage?: string | null;
                                /**
                                 * @example healthy
                                 * @enum {string}
                                 */
                                healthStatus?: "healthy" | "degraded" | "down";
                            };
                            database?: {
                                /**
                                 * @example up
                                 * @enum {string}
                                 */
                                status?: "up" | "down";
                            };
                            environment?: {
                                /** @example production */
                                nodeEnv?: string;
                                /** @example UTC */
                                timezone?: string;
                                /** @example 1.0.0 */
                                version?: string;
                                /** @example abc123def */
                                commit?: string;
                                /** @example 86400 */
                                uptimeSec?: number;
                            };
                            cronJobs?: {
                                /** @example true */
                                benefitsEnabled?: boolean;
                                /** @example true */
                                commissionsEnabled?: boolean;
                                schedules?: {
                                    /** @example 0 3 * * * */
                                    benefits?: string;
                                    /** @example 30 3 * * * */
                                    commissions?: string;
                                };
                            };
                            walletPool?: {
                                /** @example BEP20 */
                                network?: string;
                                /** @example USDT */
                                currency?: string;
                                /** @example 14 */
                                total?: number;
                                /** @example 13 */
                                available?: number;
                                /** @example 1 */
                                disabled?: number;
                                rotation?: {
                                    /** @example 45.5 */
                                    medianDisplayIntervalMin?: number | null;
                                    /** @example 120 */
                                    p90DisplayIntervalMin?: number | null;
                                    /** @example 1.2 */
                                    skewShownCount90d?: number | null;
                                };
                                /**
                                 * Format: date-time
                                 * @example 2025-01-16T15:25:00.000Z
                                 */
                                lastShownAt?: string | null;
                            };
                            withdrawals?: {
                                /** @example 5 */
                                pending?: number;
                                /** @example 2 */
                                processing?: number;
                                /** @example 15 */
                                completed24h?: number;
                                /** @example 45.5 */
                                avgProcessingMinutes7d?: number | null;
                                /** @example 85.5% */
                                slaHitRate7d?: string | null;
                            };
                        };
                    };
                };
                /** @description Error interno del servidor */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Failed to get system health */
                            error?: string;
                            /** @example Database connection failed */
                            message?: string;
                        };
                    };
                };
                /** @description Sistema caído - flags desactivados o sin ejecuciones en 24h */
                503: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @example down
                             * @enum {string}
                             */
                            status?: "down";
                            /** Format: date-time */
                            timestamp?: string;
                            benefits?: {
                                /**
                                 * @example down
                                 * @enum {string}
                                 */
                                healthStatus?: "down";
                                /** @example null */
                                lastRun?: string | null;
                                /** @example 0 */
                                errors?: number;
                            };
                            commissionsUnlock?: {
                                /**
                                 * @example down
                                 * @enum {string}
                                 */
                                healthStatus?: "down";
                                /** @example null */
                                lastRun?: string | null;
                                /** @example 0 */
                                errors?: number;
                            };
                            cronJobs?: {
                                /** @example false */
                                benefitsEnabled?: boolean;
                                /** @example false */
                                commissionsEnabled?: boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener lista de usuarios
         * @description Lista todos los usuarios con paginación y filtros
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    /** @description Buscar por email, nombre, ID o código de referido */
                    search?: string;
                    /** @description Filtrar por estado */
                    status?: "active" | "inactive" | "verified" | "unverified";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de usuarios */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                users?: components["schemas"]["AdminUserView"][];
                                pagination?: components["schemas"]["Pagination"];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/webhooks/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Webhook de Telegram
         * @description Recibe actualizaciones del bot de Telegram
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Webhook procesado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                        };
                    };
                };
                /** @description Token de webhook inválido */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /** @example USR_20240101_001 */
            userId?: string;
            /**
             * Format: email
             * @example usuario@ejemplo.com
             */
            email?: string;
            /** @example Juan */
            firstName?: string;
            /** @example Pérez */
            lastName?: string;
            /** @example +1234567890 */
            phone?: string;
            /** @example México */
            country?: string;
            /**
             * @example user
             * @enum {string}
             */
            role?: "user" | "admin";
            /** @example REF123456 */
            referralCode?: string;
            /** @example true */
            isActive?: boolean;
            /** @example true */
            isVerified?: boolean;
            balances?: {
                /** @example 1500.5 */
                available?: number;
                /** @example 200 */
                pending?: number;
                /** @example 1700.5 */
                total?: number;
            };
            referralStats?: {
                /** @example 5 */
                directReferrals?: number;
                /** @example 15 */
                totalReferrals?: number;
                /** @example 750 */
                totalCommissions?: number;
            };
            /** Format: date-time */
            lastLoginAt?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        UserProfile: components["schemas"]["User"] & {
            referredBy?: {
                /** @example USR_20240101_002 */
                userId?: string;
                /** @example referidor@ejemplo.com */
                email?: string;
                /** @example María García */
                fullName?: string;
            } | null;
            statistics?: {
                /** @example 3 */
                totalPurchases?: number;
                /** @example 3000 */
                totalInvested?: number;
                /** @example 450 */
                totalEarned?: number;
                /** @example 2 */
                activePackages?: number;
            };
        };
        Package: {
            /** @example PKG_BASIC_001 */
            packageId?: string;
            /** @example Paquete Básico */
            name?: string;
            /** @example 1000 */
            price?: number;
            /** @example USDT */
            currency?: string;
            /** @example 0.015 */
            dailyBenefitRate?: number;
            /** @example 1.5 */
            dailyBenefitPercentage?: string;
            /** @example 30 */
            benefitDays?: number;
            /** @example 12 */
            totalCycles?: number;
            /** @example 360 */
            totalDurationDays?: number;
            /** @example 540 */
            totalBenefitAmount?: number;
            /** @example 1.54 */
            totalROI?: number;
            commissionRates?: {
                /**
                 * @description Tasa de comisión por referido directo
                 * @example 0.1
                 */
                directReferralRate?: number;
                /**
                 * @description Tasa de bono por activación de referido
                 * @example 0.1
                 */
                parentBonusRate?: number;
            };
            /** @example Paquete ideal para principiantes */
            description?: string;
            /** @example [
             *       "Beneficios diarios",
             *       "Comisiones por referidos",
             *       "Soporte 24/7"
             *     ] */
            features?: string[];
            /** @example 1 */
            minPurchase?: number;
            /** @example 10 */
            maxPurchase?: number;
            /** @example true */
            isActive?: boolean;
            /** @example true */
            isVisible?: boolean;
            /** Format: date-time */
            createdAt?: string;
        };
        Purchase: {
            /** @example PUR_20240101_001 */
            purchaseId?: string;
            user?: {
                /** @example USR_20240101_001 */
                userId?: string;
                /** @example usuario@ejemplo.com */
                email?: string;
            };
            package?: {
                /** @example PKG_BASIC_001 */
                packageId?: string;
                /** @example Paquete Básico */
                name?: string;
            };
            /** @example 2 */
            quantity?: number;
            /** @example 1000 */
            unitPrice?: number;
            /** @example 2000 */
            totalAmount?: number;
            /** @example USDT */
            currency?: string;
            /**
             * @example pending
             * @enum {string}
             */
            status?: "pending" | "hash_submitted" | "confirmed" | "rejected";
            assignedWallet?: {
                /** @example TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE */
                address?: string;
                /** @example TRC20 */
                network?: string;
            };
            /** @example 0x1234567890abcdef */
            transactionHash?: string | null;
            /** Format: date-time */
            paymentDeadline?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            confirmedAt?: string | null;
        };
        PendingPurchase: components["schemas"]["Purchase"] & {
            /**
             * @description Tiempo de espera en minutos
             * @example 45
             */
            waitingTime?: number;
        };
        Withdrawal: {
            /** @example WTH_20240101_001 */
            withdrawalId?: string;
            user?: {
                /** @example USR_20240101_001 */
                userId?: string;
                /** @example usuario@ejemplo.com */
                email?: string;
            };
            /** @example 100 */
            amount?: number;
            /** @example USDT */
            currency?: string;
            /** @example TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE */
            destinationAddress?: string;
            /** @example TRC20 */
            network?: string;
            /**
             * @example pending
             * @enum {string}
             */
            status?: "pending" | "approved" | "completed" | "rejected";
            /** @example 0x1234567890abcdef */
            txHash?: string | null;
            /** Format: date-time */
            requestedAt?: string;
            /** Format: date-time */
            approvedAt?: string | null;
            /** Format: date-time */
            completedAt?: string | null;
            /** Format: date-time */
            rejectedAt?: string | null;
            /** @example Retiro procesado exitosamente */
            adminNotes?: string | null;
        };
        Commission: {
            /** @example COM_20240101_001 */
            commissionId?: string;
            earner?: {
                /** @example USR_20240101_001 */
                userId?: string;
                /** @example usuario@ejemplo.com */
                email?: string;
            };
            source?: {
                /** @example USR_20240101_002 */
                userId?: string;
                /** @example referido@ejemplo.com */
                email?: string;
            };
            purchase?: {
                /** @example PUR_20240101_001 */
                purchaseId?: string;
                /** @example Paquete Básico */
                packageName?: string;
            };
            /** @example 100 */
            commissionAmount?: number;
            /** @example 0.1 */
            commissionRate?: number;
            /**
             * @example referral
             * @enum {string}
             */
            type?: "referral" | "binary";
            /**
             * @example unlocked
             * @enum {string}
             */
            status?: "pending" | "unlocked" | "paid";
            /** Format: date-time */
            unlockDate?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            paidAt?: string | null;
        };
        Transaction: {
            /** @example TXN_20240101_001 */
            transactionId?: string;
            user?: {
                /** @example USR_20240101_001 */
                userId?: string;
            };
            /**
             * @example commission
             * @enum {string}
             */
            type?: "purchase" | "commission" | "withdrawal" | "daily_benefit";
            /** @example 100 */
            amount?: number;
            /** @example USDT */
            currency?: string;
            /**
             * @example completed
             * @enum {string}
             */
            status?: "pending" | "completed" | "failed";
            /** @example Comisión por referido nivel 1 */
            description?: string;
            reference?: {
                /** @example commission */
                type?: string;
                /** @example COM_20240101_001 */
                id?: string;
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            processedAt?: string | null;
        };
        AdminUserView: components["schemas"]["User"] & {
            referredBy?: {
                /** @example USR_20240101_002 */
                userId?: string;
                /** @example referidor@ejemplo.com */
                email?: string;
                /** @example María García */
                fullName?: string;
            } | null;
        };
        AuthResponse: {
            /** @example true */
            success?: boolean;
            /** @example Login exitoso */
            message?: string;
            data?: {
                /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
                token?: string;
                user?: components["schemas"]["User"];
                /** @example 24h */
                expiresIn?: string;
            };
        };
        ErrorResponse: {
            /** @example false */
            success?: boolean;
            /** @example Error de validación */
            message?: string;
            /** @example VALIDATION_ERROR */
            code?: string;
            errors?: {
                /** @example email */
                field?: string;
                /** @example Email inválido */
                message?: string;
            }[];
        };
        Pagination: {
            /** @example 1 */
            currentPage?: number;
            /** @example 5 */
            totalPages?: number;
            /** @example 100 */
            totalCount?: number;
            /** @example true */
            hasNext?: boolean;
            /** @example false */
            hasPrev?: boolean;
        };
        Role: {
            /** @example 60f7b3b3b3b3b3b3b3b3b3b3 */
            _id?: string;
            /**
             * @description Nombre único del rol
             * @example admin
             */
            name?: string;
            /**
             * @description Nombre para mostrar
             * @example Administrador
             */
            displayName?: string;
            /**
             * @description Descripción del rol
             * @example Acceso completo al sistema
             */
            description?: string;
            permissions?: {
                /**
                 * @description Recurso sobre el que se aplica el permiso
                 * @example users
                 */
                resource?: string;
                /**
                 * @description Acciones permitidas sobre el recurso
                 * @example [
                 *       "read",
                 *       "write",
                 *       "delete"
                 *     ]
                 */
                actions?: string[];
            }[];
            /**
             * @description Si el rol está activo
             * @example true
             */
            isActive?: boolean;
            /**
             * @description Si es un rol del sistema (no se puede eliminar)
             * @example true
             */
            isSystem?: boolean;
            /**
             * @description ID del usuario que creó el rol
             * @example 60f7b3b3b3b3b3b3b3b3b3b3
             */
            createdBy?: string;
            /**
             * @description ID del usuario que actualizó el rol
             * @example 60f7b3b3b3b3b3b3b3b3b3b3
             */
            updatedBy?: string;
            /**
             * Format: date-time
             * @description Fecha de creación
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Fecha de última actualización
             */
            updatedAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
